{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getPostComments","postId","fetch","then","response","json","comments","data","filter","com","PostsList","props","useState","posts","setUserPost","isOpen","isOpenChange","handleChange","id","userId","parseInt","post","res","userPosts","useEffect","className","map","key","title","type","onClick","handleOpen","NewCommentForm","name","setName","email","setEmail","comment","setComment","newComment","body","onSubmit","event","handleSubmit","placeholder","value","onChange","target","PostDetails","selectedPostId","setPost","setComments","isCommentsShow","isCommentsShowToggle","item","handleRemove","commentId","method","removeComment","commentsArr","length","obj","preventDefault","JSON","stringify","patch","App","selectedUserId","userSelect","selectPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5f6894c.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport function getUserPosts(userId) {\n  if (parseInt(userId, 10)) {\n    return fetch(`${BASE_URL}/posts?userId=${userId}`)\n      .then(post => post.json())\n      .then(res => res.data);\n  }\n\n  return fetch(`${BASE_URL}/posts`)\n    .then(post => post.json())\n    .then(res => res.data);\n}\n\nexport function getPostDetails(postId) {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(res => res.json())\n    .then(res => res.data);\n}\n\nexport function getPostComments(postId) {\n  return fetch(`${BASE_URL}/comments`)\n    .then(response => response.json())\n    .then(comments => comments.data.filter(com => com.postId === postId));\n}\n\nexport function removeComment(commentId) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n}\n\nexport function patch(obj) {\n  return fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    body: JSON.stringify({ ...obj }),\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = (props) => {\n  const [posts, setUserPost] = useState('');\n  const [isOpen, isOpenChange] = useState(false);\n\n  const handleChange = (id) => {\n    getUserPosts(id).then((userPosts) => {\n      if (userPosts) {\n        setUserPost(userPosts);\n      }\n    });\n  };\n\n  useEffect(() => {\n    handleChange(props.userId);\n  }, [props.userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts ? posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            {isOpen[0] && isOpen[1] === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  props.handleOpen(0);\n                  isOpenChange([false, post.id]);\n                }}\n              >\n                close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  props.handleOpen(post.id);\n                  isOpenChange([true, post.id]);\n                }}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        )) : `not post yet`}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  handleOpen: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = (props) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const newComment = {\n    postId: props.postId,\n    name,\n    email,\n    body: comment,\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        props.handleSubmit(event, newComment);\n        setComment('');\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={event => setComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  getPostDetails,\n  getPostComments,\n  removeComment,\n  patch,\n} from '../../api/posts';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, setPost] = useState('');\n  const [comments, setComments] = useState([]);\n  const [isCommentsShow, isCommentsShowToggle] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId).then(item => setPost(item));\n\n    getPostComments(selectedPostId).then(comment => setComments(comment));\n  }, [selectedPostId]);\n\n  const handleSubmit = (event, obj) => {\n    event.preventDefault();\n    patch(obj).then(() => getPostComments(selectedPostId)\n      .then(commentsArr => setComments(commentsArr))\n      .then());\n  };\n\n  const handleRemove = (commentId) => {\n    removeComment(commentId)\n      .then(() => getPostComments(selectedPostId))\n      .then(commentsArr => setComments(commentsArr));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post ? post.body : 'Loading...'}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => isCommentsShowToggle(!isCommentsShow)}\n        >\n          {isCommentsShow\n            ? `Hide ${comments.length} comments`\n            : `Show ${comments.length} comments`}\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {comments\n            && isCommentsShow\n            && comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleRemove(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={selectedPostId} handleSubmit={handleSubmit} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUserId, userSelect] = useState('');\n  const [selectedPostId, selectPostId] = useState('');\n\n  const handleOpen = (postId) => {\n    if (postId) {\n      selectPostId(postId);\n    } else {\n      selectPostId('');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => userSelect(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList userId={selectedUserId} handleOpen={handleOpen} />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}